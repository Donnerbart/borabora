/*
 * Copyright (c) 2016, Christoph Engelbert (aka noctarius) and
 * contributors. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
options {
    STATIC = false;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
    DEBUG_PARSER=false;
    DEBUG_TOKEN_MANAGER=false;
}
PARSER_BEGIN(QueryParser)
    package com.noctarius.borabora;
    import java.io.*;
    import com.noctarius.borabora.spi.*;
    import com.noctarius.borabora.builder.*;
    import java.text.*;
    import java.util.*;

    /**
     * Query Language Definition:<br/>
     * <tt>#</tt> Initial stream accessor, can be followed by an optional uint index <tt>#123</tt><br/>
     * <tt>{}</tt> Dictionary query, must have identifier defined, legal types include string, int, float, number
     * <tt>{"string"}, {1234}, {1234.56}</tt><br/>
     * <tt>(index)</tt> Sequence query, must have identifier defined, legal types is uint <tt>(123)</tt><br/>
     * <tt>-></tt> Type match, must have one of the following type information defined:
     * <ul>
     *   <li><tt>int</tt>: signed int (up to 64 bits)</li>
     *   <li><tt>uint</tt>: unsigned int (up to 64 bits)</li>
     *   <li><tt>nint</tt>: negative int (up to 64 bits)</li>
     *   <li><tt>float/tt>: half, single or double precision signed float (up to 64 bits)</li>
     *   <li><tt>ufloat</tt>: half, single or double precision unsigned float (up to 64 bits)</li>
     *   <li><tt>nfloat</tt>: half, single or double precision negative float (up to 64 bits)</li>
     *   <li><tt>number</tt>: any of types int, uint, float, ufloat</li>
     *   <li><tt>string</tt>: ASCII or UTF8 encoded string</li>
     *   <li><tt>dictionary</tt>: dictionary type</li>
     *   <li><tt>sequence</tt>: sequence type</li>
     *   <li><tt>tag</tt>: unspecified tag type</li>
     *   <li><tt>tag$tagId</tt>: specific tag type, defined by tagId as uint</li>
     *   <li><tt>bool</tt>: boolean type</li>
     *   <li><tt>datetime</tt>: datetime type</li>
     *   <li><tt>timestamp</tt>: epoch based linux timestamp type</li>
     *   <li><tt>uri</tt>: URI type</li>
     *   <li><tt>enccbor</tt>: CBOR encoded string</li>
     * </ul>
     */
    class QueryParser {
        private GraphQueryBuilder queryBuilder;
        private Collection<TagDecoder> processors;

        private Deque generatorStack = new LinkedList();

        private DictionaryGraphQueryBuilder dictionaryGraphQueryBuilder;
        private SequenceGraphQueryBuilder sequenceGraphQueryBuilder;
        private StreamEntryGraphQueryBuilder streamEntryGraphQueryBuilder;

        private QueryParser(Reader reader, GraphQueryBuilder queryBuilder, Collection<TagDecoder> processors) {
            this(reader);
            this.queryBuilder = queryBuilder;
            this.processors = processors;
        }

        static void parse(String query, GraphQueryBuilder queryBuilder, Collection<TagDecoder> processors)
                throws ParseException, TokenMgrError {

            new QueryParser(new StringReader(query), queryBuilder, processors).select();
        }
    }
PARSER_END(QueryParser)

SKIP:  {
    "\n"
  | "\r"
  | "\r\n"
  | "\\"
  | "\t"
  | " "
}

TOKEN: {
       < UINT:   (["0"-"9"])+ >
     | < INT:    (("-")? ["0"-"9"])+ >
     | < UFLOAT: (["0"-"9"])* "." (["0"-"9"])+ | (["0"-"9"])+ "." (["0"-"9"])* >
     | < FLOAT:  (("-")? ["0"-"9"])* "." (["0"-"9"])+ | (("-")? ["0"-"9"])+ "." (["0"-"9"])* >
     | < STRING: "'" (~["'"])* "'" >
     | < HASH:   ("#") >
     | < OBRA:   ("(") >
     | < CBRA:   (")") >
     | < OCBR:   ("{") >
     | < CCBR:   ("}") >
     | < TMAT:   ("->") >
     | < OPT:    ("?") >
     | < COLON:  (":") >
     | < COMMA:  (",") >
     | < UNDER:  ("_") >

     | < TYPE:   (
          "int"
        | "uint"
        | "nint"
        | "float"
        | "ufloat"
        | "nfloat"
        | "number"
        | "string"
        | "dictionary"
        | "sequence"
        | "tag"
        | ("tag$") (<UINT>)
        | "bool"
        | "datetime"
        | "timestamp"
        | "uri"
        | "enccbor"
     ) >

     | < IDENT:  ( (["a"-"z", "A"-"Z"]|<UNDER>)+ (["a"-"z", "A"-"Z", "0"-"9"]|<UNDER>)* ) >
}

void select(): {

}
{
    ( query() | type() ) <EOF>
}

void element(): {
}
{
    ( property() | stream() )
}

void type(): {
}
{
    <OBRA> ( dictionaryType() | sequenceType() ) <CBRA>
}

void dictionaryType(): {
}
{
    {
        DictionaryGraphQueryBuilder dictionaryGraphQueryBuilder = ((StreamGraphQueryBuilder) queryBuilder).asDictionary();
        generatorStack.addFirst(dictionaryGraphQueryBuilder);
    }
    ( property() ( <COMMA> property() )* )
    {
        dictionaryGraphQueryBuilder.endDictionary();
        generatorStack.removeFirst();
    }
}

void sequenceType(): {
}
{
    {
        SequenceGraphQueryBuilder sequenceGraphQueryBuilder = ((StreamGraphQueryBuilder) queryBuilder).asSequence();
        generatorStack.addFirst(sequenceGraphQueryBuilder);
    }
    ( entry() ( <COMMA> entry() )* )
    {
        sequenceGraphQueryBuilder.endSequence();
        generatorStack.removeFirst();
    }
}

void entry(): {
}
{
    {
        SequenceGraphQueryBuilder sequenceGraphQueryBuilder = (SequenceGraphQueryBuilder) generatorStack.peekFirst();
        StreamEntryGraphQueryBuilder streamEntryGraphQueryBuilder = sequenceGraphQueryBuilder.putEntry();
    }
    ( stream() | type() )
    {
        streamEntryGraphQueryBuilder.endEntry();
    }
}

void property(): {
    Token intToken = null;
    Token floatToken = null;
    Token stringToken = null;
}
{
    (
        intToken = <INT> |
        intToken = <UINT> |
        floatToken = <FLOAT> |
        floatToken = <UFLOAT> |
        stringToken = <IDENT>
    )
    {
        DictionaryGraphQueryBuilder dictionaryGraphQueryBuilder = (DictionaryGraphQueryBuilder) generatorStack.peekFirst();

        if (intToken != null) {
            long value = Long.parseLong(intToken.image);
            streamEntryGraphQueryBuilder = dictionaryGraphQueryBuilder.putEntry(value);
        } else if (floatToken != null) {
            try {
                NumberFormat format = DecimalFormat.getInstance(Locale.ENGLISH);
                double value = format.parse(floatToken.image).doubleValue();
                streamEntryGraphQueryBuilder = dictionaryGraphQueryBuilder.putEntry(value);
            } catch (java.text.ParseException e) {
                throw new QueryParserException(e);
            }
        } else if (stringToken != null) {
            String string = stringToken.image;
            streamEntryGraphQueryBuilder = dictionaryGraphQueryBuilder.putEntry(string);
        }
    }
    <COLON> ( query() | type() )
    {
        streamEntryGraphQueryBuilder.endEntry();
    }
}

void stream(): {
    Token intToken = null;
}
{
    <HASH> ( intToken = <UINT> )?
    {
        long index = intToken == null ? 0 : Long.parseLong(intToken.image);
        ((StreamGraphQueryBuilder) queryBuilder).stream(index);
    }
}

void dictionary(): {
    Token intToken = null;
    Token floatToken = null;
    Token stringToken = null;
}
{
    (<OCBR>)
    (
        intToken = <INT> |
        intToken = <UINT> |
        floatToken = <FLOAT> |
        floatToken = <UFLOAT> |
        stringToken = <STRING>
    )
    (<CCBR>)
    {
        if (intToken != null) {
            long value = Long.parseLong(intToken.image);
            queryBuilder.dictionary(value);
        } else if (floatToken != null) {
            try {
                NumberFormat format = DecimalFormat.getInstance(Locale.ENGLISH);
                double value = format.parse(floatToken.image).doubleValue();
                queryBuilder.dictionary(value);
            } catch (java.text.ParseException e) {
                throw new QueryParserException(e);
            }
        } else if (stringToken != null) {
            String string = stringToken.image;
            string = string.substring(1, string.length() - 1);
            queryBuilder.dictionary(string);
        }
    }
}

void sequence(): {
    Token intToken = null;
}
{
    (<OBRA>) ( intToken = <UINT>) (<CBRA>)
    {
        long index = Long.parseLong(intToken.image);
        queryBuilder.sequence(index);
    }
}

void expression(): {
}
{
    (dictionary() | sequence() | typematch())
}

void typematch(): {
    Token optToken = null;
    Token typeToken = null;
}
{
    (<TMAT>) (optToken = <OPT>)? (typeToken = <TYPE>)
    {
        boolean required = optToken == null;
        String spec = typeToken.image;
        TypeSpec typeSpec = TypeSpecs.typeSpec(spec, processors);
        if (required) {
            queryBuilder.requireType(typeSpec);
        } else {
            queryBuilder.nullOrType(typeSpec);
        }
    }
}

void query(): {
}
{
    stream() (expression())*
}